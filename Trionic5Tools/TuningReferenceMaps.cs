using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Trionic5Tools
{
    class TuningReferenceMaps
    {
        public double GetIgnitionAdvanceForPressureRpm(double pressure, double rpm)
        {
            double advance = 0;
            double[] pressure_axis = new double[18] { -1.00, -0.84, -0.76, -0.69, -0.60, -0.52, -0.36, -0.21, -0.04, 0.12, 0.44, 0.60, 0.75, 0.92, 1.24, 1.40, 1.60, 1.80 };
            double[] rpm_axis = new double[16] { 500, 880, 1260, 1640, 2020, 2400, 2780, 3160, 3540, 3920, 4300, 4680, 5060, 5440, 5820, 6200 };
            double[] matrix = new double[18 * 16] 
            {
                10.0, 10.0, 23.0, 29.0, 29.0, 27.0, 25.0, 25.0, 25.0, 25.0, 23.0, 20.0, 18.0, 17.0, 14.7, 12.9, 11.0, 9.0, 
                10.0, 10.0, 23.0, 29.0, 29.0, 27.0, 25.0, 24.0, 24.0, 24.0, 23.0, 20.0, 18.0, 17.0, 14.0, 11.9, 9.8, 8.0, 
                10.0, 10.0, 20.0, 29.0, 29.0, 27.0, 26.0, 25.0, 24.0, 24.0, 20.0, 20.0, 17.0, 16.0, 12.0, 10.5, 8.3, 7.2, 
                10.0, 10.0, 20.0, 30.0, 30.0, 28.0, 26.0, 25.0, 24.0, 24.0, 20.0, 19.0, 16.0, 13.5, 10.0, 9.3, 7.7, 6.5, 
                10.0, 10.0, 20.0, 30.0, 30.0, 28.0, 26.0, 25.0, 25.0, 24.0, 19.0, 18.0, 15.0, 12.5, 9.0, 8.2, 7.0, 6.0, 
                10.0, 10.0, 20.0, 30.0, 30.0, 29.0, 27.0, 26.0, 26.0, 24.0, 18.0, 17.0, 14.0, 11.0, 7.5, 6.9, 6.2, 5.7, 
                10.0, 10.0, 20.0, 30.0, 30.0, 31.0, 27.0, 26.0, 26.0, 25.0, 16.0, 16.0, 13.0, 10.5, 7.0, 6.5, 5.5, 5.3, 
                10.0, 10.0, 20.0, 30.0, 30.0, 31.0, 29.0, 27.0, 26.0, 24.0, 15.0, 14.0, 12.0, 10.0, 6.5, 5.5, 5.0, 4.8, 
                10.0, 10.0, 20.0, 30.0, 30.0, 32.0, 29.0, 27.0, 26.0, 23.0, 14.0, 12.0, 10.5, 9.0, 6.0, 5.0, 4.5, 4.2, 
                10.0, 10.0, 20.0, 26.0, 26.0, 32.0, 28.0, 25.0, 24.0, 22.0, 13.0, 10.0, 9.0, 8.0, 5.5, 5.0, 4.0, 3.7, 
                10.0, 10.0, 17.0, 23.0, 23.0, 30.0, 28.0, 24.0, 23.0, 18.0, 11.0, 9.0, 8.0, 7.0, 1.0, 1.0, 1.0, 1.0, 
                10.0, 10.0, 16.0, 20.0, 20.0, 29.0, 27.0, 24.0, 22.0, 16.0, 9.0, 9.0, 7.0, 6.0, 1.0, 1.0, 1.0, 1.0, 
                10.0, 10.0, 10.0, 18.0, 18.0, 29.0, 25.0, 22.0, 21.0, 13.0, 8.0, 8.0, 5.0, 4.0, 1.0, 1.0, 1.0, 1.0, 
                10.0, 10.0, 10.0, 12.0, 12.0, 23.0, 25.0, 21.0, 20.0, 12.0, 8.0, 6.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 
                10.0, 10.0, 10.0, 10.0, 10.0, 18.0, 21.0, 19.0, 18.0, 7.0, 6.0, 5.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 
                10.0, 10.0, 10.0, 10.0, 10.0, 17.0, 19.0, 18.0, 16.0, 5.0, 5.0, 4.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0
            };
            advance = Handle_tables(rpm, pressure, 16, 18, matrix, rpm_axis, pressure_axis);
            return advance;
        }


        public double GetIgnitionAdvanceE85ForPressureRpm(double pressure, double rpm)
        {
            double advance = 0;
            double[] pressure_axis = new double[18] { -1.00, -0.84, -0.76, -0.69, -0.60, -0.52, -0.36, -0.21, -0.04, 0.12, 0.44, 0.60, 0.75, 0.92, 1.24, 1.40, 1.60, 1.80 };
            double[] rpm_axis = new double[16] { 500, 880, 1260, 1640, 2020, 2400, 2780, 3160, 3540, 3920, 4300, 4680, 5060, 5440, 5820, 6200 };
            double[] matrix = new double[18 * 16] 
            {
                28.0, 32.0, 40.0, 40.0, 40.0, 40.0, 37.0, 35.0, 32.0, 28.0, 23.0, 22.0, 20.0, 18.0, 17.0, 16.8, 14.8, 12.8, 
                28.0, 32.0, 40.0, 40.0, 40.0, 40.0, 39.0, 37.0, 33.0, 29.0, 24.0, 22.0, 20.0, 19.0, 17.0, 17.0, 15.0, 13.0, 
                27.0, 31.0, 40.0, 40.0, 40.0, 40.0, 39.0, 37.0, 34.0, 31.0, 24.5, 23.0, 21.5, 20.0, 17.5, 17.3, 15.3, 13.3, 
                26.0, 30.0, 40.0, 40.0, 40.0, 40.0, 38.0, 36.0, 34.0, 30.5, 25.0, 23.0, 22.0, 20.5, 17.5, 16.8, 14.8, 12.8, 
                25.0, 29.0, 40.0, 40.0, 40.0, 39.0, 37.0, 34.0, 33.0, 31.5, 28.0, 25.0, 23.0, 21.5, 16.4, 15.8, 13.8, 11.8, 
                24.0, 28.0, 40.0, 40.0, 40.0, 38.0, 36.0, 35.0, 33.5, 33.0, 29.0, 26.0, 24.0, 23.0, 15.4, 14.7, 12.7, 10.7, 
                23.0, 27.0, 40.0, 40.0, 39.0, 37.0, 35.0, 34.0, 33.0, 32.0, 28.0, 27.0, 24.0, 22.0, 15.0, 13.6, 11.6, 9.6, 
                22.0, 26.0, 40.0, 39.0, 37.0, 35.0, 33.0, 32.5, 32.0, 30.0, 27.5, 27.0, 24.0, 21.0, 15.0, 12.0, 10.0, 8.0, 
                21.0, 25.0, 40.0, 36.5, 34.5, 32.5, 31.0, 30.5, 30.0, 29.0, 27.0, 24.0, 22.0, 19.0, 12.5, 10.0, 8.0, 6.0, 
                20.0, 23.0, 39.0, 36.0, 33.0, 31.0, 30.0, 28.0, 27.5, 26.5, 23.0, 21.0, 19.0, 17.0, 11.0, 9.0, 7.0, 5.0, 
                18.0, 21.0, 37.0, 34.0, 31.0, 30.0, 28.0, 27.0, 26.0, 25.0, 23.0, 18.0, 15.0, 13.0, 9.0, 8.0, 6.0, 4.0, 
                16.0, 18.0, 35.0, 32.0, 28.0, 26.5, 25.0, 24.5, 24.0, 23.0, 17.0, 14.0, 12.0, 10.0, 9.0, 8.0, 6.0, 4.0, 
                13.0, 15.0, 34.5, 29.0, 25.5, 25.0, 23.0, 22.0, 20.5, 19.0, 14.0, 12.0, 10.0, 8.0, 7.0, 6.0, 4.0, 2.0, 
                10.0, 12.0, 31.0, 25.0, 22.0, 20.0, 18.5, 16.0, 16.0, 15.5, 13.0, 11.5, 10.0, 8.0, 5.0, 3.0, 1.0, 0.0, 
                8.0, 10.0, 23.0, 26.0, 22.0, 18.0, 15.0, 16.0, 16.0, 16.0, 13.0, 11.5, 10.0, 8.0, 4.0, 3.0, 1.0, 0.0, 
                3.0, 6.0, 20.0, 21.0, 18.0, 16.0, 16.0, 16.0, 16.0, 16.0, 13.0, 11.5, 10.0, 8.0, 3.0, 3.0, 1.0, 0.0
            };
            advance = Handle_tables(rpm, pressure, 16, 18, matrix, rpm_axis, pressure_axis);
            return advance;
        }

        public double FuelCorrectionForPressureRpm(double pressure, double rpm)
        {
            double correction = 0;
            
            double[] pressure_axis = new double[16] { -0.84, -0.76, -0.69, -0.52, -0.36, -0.28, -0.21, -0.04, 0.12, 0.27, 0.44, 0.93, 1.08, 1.23, 1.52, 1.82 };
            double[] rpm_axis = new double[16] { 880, 1260, 1640, 1830, 2020, 2400, 2780, 3160, 3540, 3920, 4300, 4680, 5060, 5440, 5760, 6200 };
            double[] matrix = new double[16 * 16] 
            {
                0.50, 0.52, 0.57, 0.64, 0.71, 0.72, 0.73, 0.85, 0.89, 0.93, 0.98, 1.05, 1.09, 1.11, 1.12, 1.13,
                0.50, 0.55, 0.57, 0.68, 0.73, 0.75, 0.77, 0.88, 0.89, 0.95, 0.95, 1.04, 1.08, 1.10, 1.11, 1.12,
                0.50, 0.57, 0.61, 0.69, 0.74, 0.76, 0.77, 0.85, 0.88, 0.92, 0.95, 1.02, 1.06, 1.09, 1.11, 1.11,
                0.51, 0.59, 0.63, 0.71, 0.76, 0.78, 0.79, 0.83, 0.86, 0.89, 0.95, 1.01, 1.05, 1.08, 1.10, 1.11,
                0.50, 0.57, 0.62, 0.70, 0.75, 0.77, 0.78, 0.82, 0.86, 0.88, 0.92, 0.99, 1.04, 1.07, 1.08, 1.10,
                0.50, 0.56, 0.64, 0.70, 0.75, 0.77, 0.79, 0.81, 0.81, 0.88, 0.88, 0.97, 1.02, 1.05, 1.07, 1.09,
                0.50, 0.59, 0.62, 0.70, 0.73, 0.75, 0.77, 0.80, 0.80, 0.86, 0.89, 0.95, 0.98, 1.03, 1.05, 1.09,
                0.50, 0.58, 0.62, 0.71, 0.73, 0.76, 0.78, 0.80, 0.79, 0.83, 0.88, 0.91, 0.96, 1.00, 1.04, 1.07,
                0.53, 0.59, 0.63, 0.69, 0.75, 0.74, 0.77, 0.79, 0.79, 0.83, 0.85, 0.89, 0.93, 0.98, 1.02, 1.05,
                0.52, 0.57, 0.60, 0.66, 0.72, 0.70, 0.74, 0.76, 0.79, 0.79, 0.83, 0.86, 0.90, 0.95, 1.00, 1.04,
                0.52, 0.62, 0.55, 0.65, 0.73, 0.75, 0.75, 0.79, 0.80, 0.80, 0.82, 0.84, 0.88, 0.94, 0.98, 1.02,
                0.54, 0.60, 0.57, 0.64, 0.71, 0.73, 0.75, 0.75, 0.78, 0.80, 0.81, 0.82, 0.85, 0.92, 0.96, 1.00,
                0.52, 0.62, 0.57, 0.64, 0.71, 0.73, 0.73, 0.75, 0.76, 0.78, 0.79, 0.80, 0.83, 0.89, 0.94, 0.98,
                0.52, 0.58, 0.56, 0.65, 0.71, 0.72, 0.73, 0.75, 0.74, 0.77, 0.77, 0.79, 0.82, 0.88, 0.92, 0.97,
                0.51, 0.54, 0.57, 0.64, 0.68, 0.70, 0.70, 0.75, 0.74, 0.75, 0.76, 0.77, 0.80, 0.87, 0.91, 0.95,
                0.51, 0.53, 0.54, 0.63, 0.63, 0.66, 0.71, 0.74, 0.74, 0.75, 0.75, 0.76, 0.80, 0.86, 0.90, 0.91
            };
            correction = Handle_tables(rpm, pressure, 16, 16, matrix, rpm_axis, pressure_axis);
            return correction;
        }

        public double GetBoostRequestForTPSRPM(double tps, double rpm, double torqueRequest)
        {
            double request = 0;

            return request;
        }


        private double Handle_tables(double y_value, double x_value, int y_count, int x_count, double[] matrix, double[] y_axis, double[] x_axis)
        {
            double value;
            double tmp1;
            double tmp2;
            double tmp3, vx, vy;
            int x_indx;
            int y_indx;
            /*find y-index*/
            y_indx = 0;

            while (y_indx <= y_count - 1)
            {
                if (y_axis[y_indx] > y_value)
                {
                    break;
                }
                y_indx++;
            }

            /*find x-index*/
            x_indx = 0;

            while (x_indx <= x_count - 1)
            {
                if (x_axis[x_indx] > x_value)
                {
                    break;
                }
                x_indx++;
            }
            if (x_indx > 0)
                x_indx--;
            if (y_indx > 0)
                y_indx--;


            tmp1 = matrix[(y_indx * x_count) + x_indx];

            if (y_indx < y_count - 1)
            {
                tmp2 = matrix[(y_indx + 1) * x_count + x_indx];
            }
            else
            {
                tmp2 = tmp1;
            }
            if (x_indx < x_count - 1)
            {
                tmp3 = matrix[(y_indx * x_count) + (x_indx + 1)];
            }
            else
            {
                tmp3 = tmp1;
            }



            //trionic style x&y
            if (x_indx < x_count - 1 && y_indx < y_count - 1)
            {
                vx = interpolate2((tmp3 - tmp1), (x_axis[x_indx + 1] - x_axis[x_indx]), (x_value - x_axis[x_indx]), tmp1);
                vy = interpolate2((tmp2 - tmp1), (y_axis[y_indx + 1] - y_axis[y_indx]), (y_value - y_axis[y_indx]), tmp1);
            }
            else
            {
                vx = interpolate2((tmp3 - tmp1), (x_axis[x_indx] - x_axis[x_indx]), (x_value - x_axis[x_indx]), tmp1);
                vy = interpolate2((tmp2 - tmp1), (y_axis[y_indx] - y_axis[y_indx]), (y_value - y_axis[y_indx]), tmp1);
            }
            //printf("vx=0x%x vy=0x%x\n",vx,vy);
            //todo: interpolate vx and vy
            value = ((vy + vx) / 2);
            // value=interpolate2(,tmp1);

            return value;
        }


        private double interpolate2(double tmp1, double tmp2, double tmp3, double tmp4)
        {
            double retval = 0;
            try
            {
                if (tmp2 != 0)
                {
                    retval = (((tmp1 * tmp3) / tmp2) + tmp4);
                }
                else
                {
                    retval = tmp4;
                }
            }
            catch (Exception E)
            {
                Console.WriteLine(E.Message);
            }
            return retval;

        }
    }
}
